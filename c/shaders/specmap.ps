////////////////////////////////////////////////////////////////////////////////
// Filename: specmap.ps
////////////////////////////////////////////////////////////////////////////////
#version 400


/////////////////////
// INPUT VARIABLES //
/////////////////////
in vec2 texCoord;
in vec3 normal;
in vec3 tangent;
in vec3 binormal;
in vec3 viewDirection;


//////////////////////
// OUTPUT VARIABLES //
//////////////////////
out vec4 outputColor;


///////////////////////
// UNIFORM VARIABLES //
///////////////////////
uniform sampler2D shaderTexture1;
uniform sampler2D shaderTexture2;
uniform sampler2D shaderTexture3;
uniform vec3 lightDirection;
uniform vec4 diffuseLightColor;
uniform vec4 specularColor;
uniform float specularPower;


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
void main(void)
{
	vec4 textureColor;
	vec4 bumpMap;
	vec3 bumpNormal;
	vec3 lightDir;
	float lightIntensity;
    vec4 color;
    vec4 specularIntensity;
    vec3 reflection;
    float specValue;
    vec4 specular;


	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = texture(shaderTexture1, texCoord);

    // Sample the pixel from the normal map.
    bumpMap = texture(shaderTexture2, texCoord);

    // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;

	// Calculate the normal from the data in the normal map.
    bumpNormal = (bumpMap.x * tangent) + (bumpMap.y * binormal) + (bumpMap.z * normal);

	// Normalize the resulting bump normal.
    bumpNormal = normalize(bumpNormal);

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel based on the normal map value.
	lightIntensity = clamp(dot(bumpNormal, lightDir), 0.0f, 1.0f);

	// Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
	color =  clamp((diffuseLightColor * lightIntensity), 0.0f, 1.0f);

    // Combine the final light color with the texture color.
    color = color * textureColor;

    if(lightIntensity > 0.0f)
    {
        // Sample the pixel from the specular map texture.
        specularIntensity = texture(shaderTexture3, texCoord);

        // Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2.0f * lightIntensity * bumpNormal - lightDir);

        // Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specValue = pow(clamp(dot(reflection, viewDirection), 0.0f, 1.0f), specularPower);
        specular = vec4(specValue, specValue, specValue, 1.0f);

        // Use the specular map to determine the intensity of specular light at this pixel.
        specular = specular * specularIntensity;

        // Multiply the amount of specular light by the input specular color to get the final specular color value.
        specular = specular * specularColor;

        // Add the specular component last to the output color.
        color = clamp(color + specular, 0.0f, 1.0f);
    }

    outputColor = color;
}

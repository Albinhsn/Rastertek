#version 400

in vec2 texCoord;
in vec3 normal;
in vec3 tangent;
in vec3 binormal;


out vec4 outputColor;

uniform sampler2D shaderTexture1;
uniform sampler2D shaderTexture2;
uniform vec3 lightDirection;
uniform vec4 diffuseLightColor;

void main(void)
{
  vec4 textureColor;
  vec4 bumpMap;
  vec3 bumpNormal;
  vec3 lightDir;
  float lightIntensity;

  textureColor = texture(shaderTexture1, texCoord);

  bumpMap = texture(shaderTexture2, texCoord);

  bumpMap = (bumpMap * 2.0f) - 1.0f;

  bumpNormal = (bumpMap.x * tangent) + (bumpMap.y * binormal) + (bumpMap.z * normal);

  bumpNormal = normalize(bumpNormal);

  lightDir = -lightDirection;

  lightIntensity = clamp(dot(bumpNormal, lightDir), 0.0f, 1.0f);

  outputColor = clamp((diffuseLightColor * lightIntensity), 0.0f, 1.0f);

  outputColor = outputColor * textureColor;
}
